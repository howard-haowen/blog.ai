{
  
    
        "post0": {
            "title": "Visualizing real estate prices with Altair",
            "content": "Intro . Several months into the journey of Python programming, I was already aware of visualization tools like Matplotlib Seaborn, and Plotly, which are commonly discussed on Medium. But I&#39;d never heard of Altair until I came across fastpages. Since I plan to keep writing on this fastpages-powered blog, I did some experiments with Altair. For illustration purprose, I&#39;ll be using the dataset of real estate prices in Kaohsiung, TW, which I&#39;ve cleaned and put together in my GitHub repo. For those of you who don&#39;t know Kaohsiung, it&#39;s selected by the New York Times as one of the 52 places to love in 2021. Maybe you&#39;ll consider buying an apartment in Kaohsiung after reading this post. Who knows? . Import dependencies . Altair is alrealdy pre-installed on Colab. So there&#39;s no need to pip-install it if you&#39;re doing this on Colab. . import pandas as pd import altair as alt from altair import datum . Load the dataset . The first thing to do is to git-clone the dataset into your environment. . !git clone -l -s https://github.com/howard-haowen/kh-real-estate cloned-repo %cd cloned-repo !ls . Cloning into &#39;cloned-repo&#39;... warning: --local is ignored remote: Enumerating objects: 100, done. remote: Counting objects: 100% (100/100), done. remote: Compressing objects: 100% (100/100), done. remote: Total 100 (delta 46), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (100/100), 3.30 MiB | 1.03 MiB/s, done. Resolving deltas: 100% (46/46), done. /content/cloned-repo catboost-model-feature-importance.png catboost-model-residuals.png catboost-model-feature-importance-shap-value.png compare-models.png catboost-model-learning-curve.png kh-house-prices.csv catboost-model-outliers.png kh-house-prices.pkl catboost-model.png LICENSE catboost-model-prediction-errors.png README.md . . Let&#39;s take a look at 5 random observations. . df = pd.read_pickle(&#39;kh-house-prices.pkl&#39;) df.sample(5) . . purpose trading_target land_area property_type living_room bedroom bathroom partition property_area is_managed total_floor parking_area parking_price parking_type land_use district trading_date trading_year built_date built_year price_per_sqm . 25204 住家用 | 房地(土地+建物)+車位 | 13.53 | 住宅大樓(11層含以上有電梯) | 2 | 4 | 2 | 有 | 129.39 | 有 | 13 | 0.00 | 0 | 坡道平面 | 商 | 楠梓區 | 2017-01-20 | 2017 | 1995-01-26 | 1995 | 33233.0 | . 19272 住家用 | 房地(土地+建物)+車位 | 18.24 | 住宅大樓(11層含以上有電梯) | 0 | 0 | 0 | 無 | 360.51 | 有 | 36 | 61.10 | 0 | 坡道平面 | 商 | 鼓山區 | 2016-05-20 | 2016 | 2014-06-26 | 2014 | 62717.0 | . 12575 住家用 | 房地(土地+建物)+車位 | 13.12 | 住宅大樓(11層含以上有電梯) | 2 | 3 | 2 | 有 | 145.90 | 有 | 15 | 12.66 | 840000 | 坡道機械 | 住 | 鼓山區 | 2015-07-14 | 2015 | 2014-05-15 | 2014 | 73101.0 | . 15299 住家用 | 房地(土地+建物)+車位 | 15.42 | 住宅大樓(11層含以上有電梯) | 2 | 3 | 2 | 有 | 125.39 | 有 | 15 | 11.24 | 0 | 坡道機械 | 住 | 左營區 | 2015-11-08 | 2015 | 2007-01-12 | 2007 | 43066.0 | . 31446 住家用 | 房地(土地+建物)+車位 | 13.91 | 住宅大樓(11層含以上有電梯) | 2 | 3 | 2 | 有 | 177.61 | 有 | 13 | 0.00 | 0 | 坡道機械 | 商 | 鼓山區 | 2017-12-12 | 2017 | 1996-04-05 | 1996 | 44479.0 | . The dataset includes 45717 observations and 21 columns. . df.shape . (45717, 21) . Most of the column names should be self-explanatory since I&#39;ve translated them from the original Chinese to English. . columns = df.columns.tolist() columns . [&#39;purpose&#39;, &#39;trading_target&#39;, &#39;land_area&#39;, &#39;property_type&#39;, &#39;living_room&#39;, &#39;bedroom&#39;, &#39;bathroom&#39;, &#39;partition&#39;, &#39;property_area&#39;, &#39;is_managed&#39;, &#39;total_floor&#39;, &#39;parking_area&#39;, &#39;parking_price&#39;, &#39;parking_type&#39;, &#39;land_use&#39;, &#39;district&#39;, &#39;trading_date&#39;, &#39;trading_year&#39;, &#39;built_date&#39;, &#39;built_year&#39;, &#39;price_per_sqm&#39;] . Here&#39;re some basic stats. . df.describe() . land_area living_room bedroom bathroom property_area total_floor parking_area parking_price trading_year built_year price_per_sqm . count 45717.000000 | 45717.000000 | 45717.000000 | 45717.000000 | 45717.000000 | 45717.000000 | 45717.000000 | 4.571700e+04 | 45717.000000 | 45717.000000 | 4.571700e+04 | . mean 24.949719 | 1.739987 | 2.921058 | 1.907540 | 145.261129 | 13.729947 | 6.606456 | 9.966087e+04 | 2016.760702 | 1999.837938 | 5.222278e+04 | . std 32.301563 | 0.583373 | 1.299294 | 1.084739 | 89.910644 | 7.810174 | 81.029070 | 5.323162e+05 | 1.699207 | 11.445783 | 2.236209e+04 | . min 0.010000 | 0.000000 | 0.000000 | 0.000000 | 0.020000 | 1.000000 | 0.000000 | 0.000000e+00 | 2012.000000 | 1913.000000 | 0.000000e+00 | . 25% 10.450000 | 2.000000 | 2.000000 | 1.000000 | 89.080000 | 8.000000 | 0.000000 | 0.000000e+00 | 2015.000000 | 1994.000000 | 3.849700e+04 | . 50% 16.630000 | 2.000000 | 3.000000 | 2.000000 | 128.440000 | 14.000000 | 0.000000 | 0.000000e+00 | 2017.000000 | 1999.000000 | 4.829400e+04 | . 75% 26.200000 | 2.000000 | 3.000000 | 2.000000 | 171.200000 | 15.000000 | 0.000000 | 0.000000e+00 | 2018.000000 | 2009.000000 | 6.233000e+04 | . max 2140.100000 | 22.000000 | 52.000000 | 50.000000 | 4119.900000 | 85.000000 | 17098.000000 | 1.000000e+07 | 2020.000000 | 2020.000000 | 1.048343e+06 | . MaxRowsError is the first trouble I got! It turns out that by default Altair only allows you to plot a dataset with a maximum of 5000 rows. . alt.Chart(df).mark_point().encode( x=&#39;trading_year&#39;, y=&#39;price_per_sqm&#39;, color=&#39;district&#39;, ).interactive() . MaxRowsError Traceback (most recent call last) /usr/local/lib/python3.6/dist-packages/altair/vegalite/v4/api.py in to_dict(self, *args, **kwargs) 361 copy = self.copy(deep=False) 362 original_data = getattr(copy, &#34;data&#34;, Undefined) --&gt; 363 copy.data = _prepare_data(original_data, context) 364 365 if original_data is not Undefined: /usr/local/lib/python3.6/dist-packages/altair/vegalite/v4/api.py in _prepare_data(data, context) 82 # convert dataframes or objects with __geo_interface__ to dict 83 if isinstance(data, pd.DataFrame) or hasattr(data, &#34;__geo_interface__&#34;): &gt; 84 data = _pipe(data, data_transformers.get()) 85 86 # convert string input to a URLData /usr/local/lib/python3.6/dist-packages/toolz/functoolz.py in pipe(data, *funcs) 625 &#34;&#34;&#34; 626 for func in funcs: --&gt; 627 data = func(data) 628 return data 629 /usr/local/lib/python3.6/dist-packages/toolz/functoolz.py in __call__(self, *args, **kwargs) 301 def __call__(self, *args, **kwargs): 302 try: --&gt; 303 return self._partial(*args, **kwargs) 304 except TypeError as exc: 305 if self._should_curry(args, kwargs, exc): /usr/local/lib/python3.6/dist-packages/altair/vegalite/data.py in default_data_transformer(data, max_rows) 17 @curried.curry 18 def default_data_transformer(data, max_rows=5000): &gt; 19 return curried.pipe(data, limit_rows(max_rows=max_rows), to_values) 20 21 /usr/local/lib/python3.6/dist-packages/toolz/functoolz.py in pipe(data, *funcs) 625 &#34;&#34;&#34; 626 for func in funcs: --&gt; 627 data = func(data) 628 return data 629 /usr/local/lib/python3.6/dist-packages/toolz/functoolz.py in __call__(self, *args, **kwargs) 301 def __call__(self, *args, **kwargs): 302 try: --&gt; 303 return self._partial(*args, **kwargs) 304 except TypeError as exc: 305 if self._should_curry(args, kwargs, exc): /usr/local/lib/python3.6/dist-packages/altair/utils/data.py in limit_rows(data, max_rows) 82 &#34;than the maximum allowed ({}). &#34; 83 &#34;For information on how to plot larger datasets &#34; &gt; 84 &#34;in Altair, see the documentation&#34;.format(max_rows) 85 ) 86 return data MaxRowsError: The number of rows in your dataset is greater than the maximum allowed (5000). For information on how to plot larger datasets in Altair, see the documentation . alt.Chart(...) . . The limitation can be lifted by calling this function. . alt.data_transformers.disable_max_rows() . DataTransformerRegistry.enable(&#39;default&#39;) . According to the official documentation, this is not a good solution. But I did it anyway because I didn&#39;t know better. I was then able to make a plot, but it only took seconds for my Colab notebook to crash. So the lesson learned is this: . . Warning: Never disable the restriction for max rows if you&#8217;re dealing with a huge amount of data! . A better way to deal with this is to pass data by URL, which only supports json and csv files. So I converted my dataframe to csv and then uploaded it to my GitHub repo. Then all that&#39;s needed to start using Altair is the URL to that file. . with open(&#39;kh-house-prices.csv&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file: df.to_csv(file, index=False) . . Tip: For Altair to load your dataset properly, make sure the dataset is viewable by entering the URL in your browser. If your dataset is stored on GitHub, that means the URL has to start with https://raw.githubusercontent.com rather than https://github.com. . This URL is the data source from which we&#39;ll be making all the charts. . url= &quot;https://raw.githubusercontent.com/howard-haowen/kh-real-estate/main/kh-house-prices.csv&quot; . Simple charts . After we got the data loading and performance issue taken care of, let&#39;s break down the syntax of Altair. . I&#39;m a visual learner, so I personally think the easiest way to get started is to go to the Example Gallery and pick the kind of charts that you&#39;d like to draw. Most of the time, all you need to do is copy-paste the codes and change the data source as well as column names. . All fancy charts start with something simple.In the case of Altair, it&#39;s alt.Chart(), which takes either URL or a pandas DataFrame object (like df in our failed example above) as its argument. . Then you decide what kinds of marks you&#39;d like to draw on the chart by calling the .mark_X() function, where X could be circle if you want to represent an observation with a circle. Other types of marks used in this post include point, line, bar, and area. . Finally, you need to call the encode() function in order to map the properties of your dataset onto the chart you&#39;re making. In this example below, the function takes three arguments: . x for which column to be mapped to the x axis | y for which column to be mapped to the y axis | color for which column to be colored on the chart | . Once you pass url to alt.Chart() and the column names in your dataset to encode(), you&#39;ll get this chart. . alt.Chart(url).mark_circle().encode( x=&#39;built_date:T&#39;, y=&#39;price_per_sqm:Q&#39;, color=&#39;district:N&#39;,) . . . Note: If your data source is a dataframe, then column names are sufficient. But if your data source is an URL as is the case here, you have to specify your data types with :X right after the column names, where X can be one of these: . Q for quantitative data | O for ordinal data | N for nominal data | T for temporal data | G for geographic data | . And one thing that I like about Altair is that there&#39;re lots of predefined aggregate functions that you can use on the fly. For instance, you can pass temporal data to the function yearmonth(), which aggreates data points in terms of year and month. Or you can pass quantitative data to average(), which calculates the mean for you. This way, you won&#39;t have to create additional columns using pandas and keep your raw data as minimal as possible. . alt.Chart(url).mark_circle().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;average(price_per_sqm):Q&#39;, color=&#39;district:N&#39;,) . . In pandas, we&#39;d filter data using df[FILTER]. In Altair, this is done by .transform_filter(). In the chart above, we see that the majority of data points gather in the lower right corner. So one way to zoom in is to set a range for built_year on the x axis, which represents the year a property was built. Suppose we want built_year to fall within 1950 and 2020, we do alt.FieldRangePredicate(field=&#39;built_year&#39;, range=[1950, 2020]). . alt.Chart(url).mark_circle().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;average(price_per_sqm):Q&#39;, color=&#39;district:N&#39;,).transform_filter( alt.FieldRangePredicate(field=&#39;built_year&#39;, range=[1950, 2020]) ) . . Similarly, if we want price_per_sqm on the y axis, which represents property prices per square meter (in NT$ of course!) to be in the range of 10k and 300k, then we do alt.FieldRangePredicate(field=&#39;price_per_sqm&#39;, range=[10000, 300000]). . alt.Chart(url).mark_circle().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;average(price_per_sqm):Q&#39;, color=&#39;district:N&#39;,).transform_filter( alt.FieldRangePredicate(field=&#39;price_per_sqm&#39;, range=[10000, 300000]) ) . . But what if we want to filter data from multiple columns? I found that an easy way to do that is to use datum.X, where X is a column name. Then the syntax is just like what you&#39;d see in pandas. Suppose we want built_year to be greater than 1950 and price_per_sqm less than 300k, then we do (datum.built_year &gt; 1950) &amp; (datum.price_per_sqm &lt; 300000). . . Important: It took me a while to figure what what kind of object datum is. It turns out that Altair is smart enough to take care of everything for you as long as you import datum. So be sure to do this: from altair import datum. . alt.Chart(url).mark_circle().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;average(price_per_sqm):Q&#39;, color=&#39;district:N&#39;,).transform_filter( (datum.built_year &gt; 1950) &amp; (datum.price_per_sqm &lt; 300000) ) . . Finally, if you want to give viewers of your chart the liberty to zoom in and out, you can make an interactive chart simply by adding .interactive() to the end of your syntax. To see the effect, click on any grid of the following chart and then scroll your mouse or move two of your fingers up and down on your Magic Trackpad. . . Warning: Try not to make too many interactive charts if your dataset is huge because they can cause serious performance issues. . alt.Chart(url).mark_circle().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;average(price_per_sqm):Q&#39;, color=&#39;district:N&#39;,).transform_filter( (datum.built_year &gt; 1950) &amp; (datum.price_per_sqm &lt; 300000) ).interactive() . . I think that&#39;s enough for the basics and for you to keep the ball rolling. Coming up are some of the numerous fancy charts that you can make with Altair. . Complex charts . Suppose we want to create a scatter plot where viewers can focus on data points from a particular district of their choice, the .add_selection() function can be quite handy. Let&#39;s first check out the unique districts in the datasets. (Btw, there&#39;re more districts in Kaohsiung. These are simply more densely populated areas.) . districts = df.district.unique().tolist() districts . [&#39;鼓山區&#39;, &#39;前金區&#39;, &#39;前鎮區&#39;, &#39;三民區&#39;, &#39;楠梓區&#39;, &#39;左營區&#39;, &#39;鳳山區&#39;, &#39;新興區&#39;, &#39;苓雅區&#39;] . We first create a variable selection, which we&#39;ll pass to .add_selection() later. The selection itself is a built-in function called alt.selection_single(), which takes the following arguments: . name for the name you want to display in the selection area | fields for a list of column names that views can choose from | init for a dictionary specifying the default value for each selectable column | bind for a dictionary specifying the way a column is to be selected (in this case, alt.binding_select() for a drop down box) and its possible values (indicated by the argument options) | . Additionally, if we want to display information about a data point upon mouseover, we can pass a list of column names to the argument tooltip of the .encode() function. . Importantly, for the interaction to work, we have to add .add_selection(selection) right before the .encode() function. . selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;district&#39;, ], init={&#39;district&#39;: &#39;左營區&#39;, }, bind={&#39;district&#39;: alt.binding_select(options=districts), } ) alt.Chart(url).mark_circle().add_selection(selection).encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;price_per_sqm:Q&#39;, color=alt.condition(selection, &#39;district:N&#39;, alt.value(&#39;lightgray&#39;)), tooltip=[&#39;property_type:N&#39;,&#39;property_area:Q&#39;,&#39;parking_area:Q&#39;, &#39;built_date:T&#39;,&#39;tradinng_date:T&#39;,&#39;price_per_sqm:Q&#39;], ).transform_filter( (datum.built_year &gt; 1950) &amp; (datum.price_per_sqm &lt; 200000) ) . . We can also make two charts and then concatenat them vertically by calling the function alt.vconcat(), which takes chart objects and data as its arguments. . selection = alt.selection_multi(fields=[&#39;district&#39;]) top = alt.Chart().mark_line().encode( x=&#39;yearmonth(built_date):T&#39;, y=&#39;mean(price_per_sqm):Q&#39;, color=&#39;district:N&#39; ).properties( width=600, height=200 ).transform_filter( selection ) bottom = alt.Chart().mark_bar().encode( x=&#39;yearmonth(trading_date):T&#39;, y=&#39;mean(price_per_sqm):Q&#39;, color=alt.condition(selection, alt.value(&#39;steelblue&#39;), alt.value(&#39;lightgray&#39;)) ).properties( width=600, height=100 ).add_selection( selection ) alt.vconcat( top, bottom, data=url ) . . We can make one chart respond to another chart based on selection on the second one. This can be useful when we want to have both a global and detailed view of the same chart. The key function we need is alt.Scale(). Watch the top chart change as you select different areas of the bottom chart. . brush = alt.selection(type=&#39;interval&#39;, encodings=[&#39;x&#39;]) base = alt.Chart(url).mark_area().encode( x = &#39;yearmonth(built_date):T&#39;, y = &#39;price_per_sqm:Q&#39; ).properties( width=600, height=200 ) upper = base.encode( alt.X(&#39;yearmonth(built_date):T&#39;, scale=alt.Scale(domain=brush)) ) lower = base.properties( height=60 ).add_selection(brush) upper &amp; lower . . Finally, you can also pick three random variables from your dataset and make a 3 times 3 grid of charts, with each varing in the x and y axis combination. To do that, we&#39;ll need to specify repetition in two places: once in the argument of the x and y axis (i.e. alt.repeat() within alt.X and alt.Y) and the other time in the outmost layer of the syntax (i.e. .repeat() at the very end). . alt.Chart(url).mark_circle().encode( alt.X(alt.repeat(&quot;column&quot;), type=&#39;quantitative&#39;), alt.Y(alt.repeat(&quot;row&quot;), type=&#39;quantitative&#39;), color=&#39;district:N&#39; ).properties( width=150, height=150 ).repeat( row=[&#39;property_area&#39;, &#39;price_per_sqm&#39;, &#39;built_year&#39;], column=[&#39;built_year&#39;, &#39;price_per_sqm&#39;, &#39;property_area&#39;] ) . . Recap . Altair is a Python library worth looking into if you want to show interactive charts on your websites and give your visitors some freedom to play with the outcome. This post only shows what I&#39;ve tried. If you wish to dig deeper into this library, uwdata/visualization-curriculum seems like a great resource, aside from the official documentation. Now that you know the average price of real estate in Kaohsiung, TW, would you consider moving down here? 👨‍💻 .",
            "url": "https://howard-haowen.github.io/blog.ai/visualization/real-estate-prices/altair/2021/01/24/Visualizing-real-estate-prices-with-Altair.html",
            "relUrl": "/visualization/real-estate-prices/altair/2021/01/24/Visualizing-real-estate-prices-with-Altair.html",
            "date": " • Jan 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "fastText embeddings for traditional Chinese",
            "content": "Intro . This video explains to you what fastText is all about as if you were five years old. If the video doesn&#39;t load, click on this link. . fastText cbow 300 dimensions from Facebook . Here&#39;re the simple steps for loading the Chinese model released by Facebook, abbreviated here as ft. . !pip install fasttext import fasttext . Collecting fasttext Downloading https://files.pythonhosted.org/packages/f8/85/e2b368ab6d3528827b147fdb814f8189acc981a4bc2f99ab894650e05c40/fasttext-0.9.2.tar.gz (68kB) |████████████████████████████████| 71kB 4.4MB/s Requirement already satisfied: pybind11&gt;=2.2 in /usr/local/lib/python3.6/dist-packages (from fasttext) (2.6.1) Requirement already satisfied: setuptools&gt;=0.7.0 in /usr/local/lib/python3.6/dist-packages (from fasttext) (51.1.1) Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from fasttext) (1.19.5) Building wheels for collected packages: fasttext Building wheel for fasttext (setup.py) ... done Created wheel for fasttext: filename=fasttext-0.9.2-cp36-cp36m-linux_x86_64.whl size=3039122 sha256=5aa81e1045293ebc74315d2013c28cd0018ec96b8868502d535b71438f1faa0c Stored in directory: /root/.cache/pip/wheels/98/ba/7f/b154944a1cf5a8cee91c154b75231136cc3a3321ab0e30f592 Successfully built fasttext Installing collected packages: fasttext Successfully installed fasttext-0.9.2 . import fasttext.util fasttext.util.download_model(&#39;zh&#39;, if_exists=&#39;ignore&#39;) # zh = Chinese . Downloading https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.zh.300.bin.gz . &#39;cc.zh.300.bin&#39; . ft = fasttext.load_model(&#39;cc.zh.300.bin&#39;) . Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar. . The ft model covers a whopping great number of words, 2000000 to be exact, because it&#39;s trained on a HUGE corpus. . len(ft.words) . 2000000 . Let&#39;s check out the top 10 words most similar to &quot;疫情&quot; (meaning &quot;pandemic situation&quot;) according to the ft model. The numbers indicate the degree of similarity. The larger the number, the greater the similarity. . ft.get_nearest_neighbors(&quot;疫情&quot;) . [(0.7571706771850586, &#39;禽流感&#39;), (0.6940484046936035, &#39;甲流&#39;), (0.6807129383087158, &#39;流感&#39;), (0.6670429706573486, &#39;疫病&#39;), (0.6640030741691589, &#39;防疫&#39;), (0.6531218886375427, &#39;萨斯病&#39;), (0.6506668329238892, &#39;H1N1&#39;), (0.6495682001113892, &#39;疫症&#39;), (0.6432098150253296, &#39;ＳＡＲＳ&#39;), (0.642063319683075, &#39;疫区&#39;)] . . The results are pretty good. But the downside is that the ft model is huge in size. After being unzipped, the model file is about 6.74G. . fastText cbow 300 dimensions from ToastyNews in Cantonese . This article is what inpired me to write this post. The author trained a fastText model on articles written in Cantonese, which uses traditional characters. Here&#39;re the simple steps for loading his model, abbreviated here as hk. . Since his model is stored on GDrive, I find it more convenient to use the gdown library to download the model. . import gdown . url = &#39;https://drive.google.com/u/0/uc?export=download&amp;confirm=4g-b&amp;id=1kmZ8NKYDngKtA_-1f3ZdmbLV0CDBy1xA&#39; output = &#39;toasty_news.bin.gz&#39; gdown.download(url, output, quiet=False) . Downloading... From: https://drive.google.com/u/0/uc?export=download&amp;confirm=4g-b&amp;id=1kmZ8NKYDngKtA_-1f3ZdmbLV0CDBy1xA To: /content/toasty_news.bin.gz 2.77GB [00:26, 106MB/s] . &#39;toasty_news.bin.gz&#39; . The file needs to be first unzipped to be loaded as a fastText model. An easy way to do that is the command !gunzip plus a file name. . !gunzip toasty_news.bin.gz . hk = fasttext.load_model(&#39;/content/toasty_news.bin&#39;) hk.get_dimension() . Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar. . 300 . The hk model covers 222906 words in total. . len(hk.words) . 222906 . fastText cbow 100 dimensions from Taiwan news in traditional Chinese . I trained a fastText model on 5816 articles of Taiwan news in traditional Chinese, most of them related to health and diseases. . tw = fasttext.load_model(path) # &quot;path&quot; is where my model is stored. tw.get_dimension() . Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar. . 100 . The tw model covers only 11089 words in total because it&#39;s trained on a much smaller corpus than the hk model. . len(tw.words) . 11089 . Comparison . My original plan was to compare all the three models and see what similar words they come up with given the same keyword. But the ft model is huge so I can&#39;t load all of them into RAM. The RAM limit on Colab is about 12G. So we&#39;ll just compare the tw and hk model. . Since we&#39;re not concerned with the degree of similarity, let&#39;s write a simple function to show just similar words. . def similar_words(keyword, model): top_10 = model.get_nearest_neighbors(keyword) top_10 = [w[1] for w in top_10] return top_10 . Then, calling the function similar_word(), with a keyword and a fastText model as the required arguments, shows the top ten words most similar to the keyword. . similar_words(&quot;疫情&quot;, hk) . [&#39;疫症&#39;, &#39;病疫情&#39;, &#39;武漢肺炎&#39;, &#39;疫潮&#39;, &#39;疫&#39;, &#39;新冠肺炎&#39;, &#39;疫調&#39;, &#39;疫市&#39;, &#39;新型冠狀病毒&#39;, &#39;疫病&#39;] . Now let&#39;s write a function to show the results of the two models side by side in a dataframe. . import pandas as pd models = {&#39;hk&#39;: hk, &#39;tw&#39;: tw} def compare_models(keyword, **models): hk_results = similar_words(keyword, models[&#39;hk&#39;]) tw_results = similar_words(keyword, models[&#39;tw&#39;]) data = {&#39;HKNews_&#39;+keyword: hk_results, &#39;TWNews_&#39;+keyword: tw_results} df = pd.DataFrame(data) return df . Let&#39;s test it out with the keyword &quot;疫情&quot;. . test = compare_models(&quot;疫情&quot;, **models) test . HKNews_疫情 TWNews_疫情 . 0 疫症 | 疫情國 | . 1 病疫情 | 因應 | . 2 武漢肺炎 | 防堵 | . 3 疫潮 | 切記 | . 4 疫 | 擴散 | . 5 新冠肺炎 | 屬地 | . 6 疫調 | 疫情處 | . 7 疫市 | 升溫 | . 8 新型冠狀病毒 | 警訊 | . 9 疫病 | 嚴峻 | . It&#39;s interesting that similar words of &quot;總統&quot; (meaning &quot;the president&quot;) include &quot;蔡總統&quot; (meaning &quot;President Tsai&quot;, referring to Taiwan&#39;s incumbent president) according to the hk model but not the tw model. I&#39;d expect the opposite. . test = compare_models(&quot;總統&quot;, **models) test . HKNews_總統 TWNews_總統 . 0 代總統 | 主持 | . 1 美國總統 | 總統府 | . 2 前總統 | 部長 | . 3 民選總統 | 親臨 | . 4 李總統 | 局長 | . 5 副總統 | 蘇益仁 | . 6 下任總統 | 幹事長 | . 7 總理 | 副院長 | . 8 首相 | 李明亮 | . 9 蔡總統 | 座談會 | . Again, it is the hk model, not the tw model, that knows &quot;蔡英文&quot; (meaning &quot;Tsai Ing-wen&quot;) is most similar to &quot;蔡總統&quot; (meaning &quot;President Tsai&quot;). The two linguistic terms have the same reference. . test = compare_models(&quot;蔡總統&quot;, **models) test . HKNews_蔡總統 TWNews_蔡總統 . 0 蔡英文 | 總統 | . 1 賴清德 | 主持 | . 2 馬英九 | 部長 | . 3 李總統 | 親臨 | . 4 林全 | 局長 | . 5 民進黨 | 陳建仁 | . 6 柯文哲 | 座談會 | . 7 總統 | 吳 | . 8 川普 | 副院長 | . 9 總統府 | 總統府 | . Finally, let&#39;s write a function to quickly compare a list of keywords. . def concat_dfs(keyword_list): dfs = [] for word in keyword_list: df = compare_models(word, **models) dfs.append(df) results = pd.concat(dfs, axis=1) return results . keywords = &quot;疫情 疫苗 病毒 肺炎 檢疫 流感 台灣&quot; key_list = keywords.split() concat_dfs(key_list) . HKNews_疫情 TWNews_疫情 HKNews_疫苗 TWNews_疫苗 HKNews_病毒 TWNews_病毒 HKNews_肺炎 TWNews_肺炎 HKNews_檢疫 TWNews_檢疫 HKNews_流感 TWNews_流感 HKNews_台灣 TWNews_台灣 . 0 疫症 | 疫情國 | 流感疫苗 | 接種 | 輪狀病毒 | 病毒型 | 武漢肺炎 | 豬鏈球菌 | 檢疫所 | 檢疫官 | 流感病毒 | 新流感 | 臺灣 | 臺灣 | . 1 病疫情 | 因應 | 免疫針 | 接種地 | 含病毒 | 腺病毒 | 武肺 | 鏈球菌 | 檢疫中心 | 檢疫站 | 流行性感冒 | 防流感 | 台灣國 | 根除 | . 2 武漢肺炎 | 防堵 | 抗體 | 接種為 | 冠狀病毒 | 病毒株 | 新冠肺炎 | 疾患 | 檢疫局 | 檢疫局 | 禽流感 | 打流感 | 台灣政府 | 歷史 | . 3 疫潮 | 切記 | 藥物 | 接種點 | 新病毒 | 病毒學 | 病疫 | 雙球菌 | 檢疫站 | 航機 | 流行病 | 對流感 | 中國大陸 | 一直 | . 4 疫 | 擴散 | 卡介苗 | 接種卡 | 腺病毒 | 型別 | 病疫情 | 心包膜炎 | 隔離 | 機場 | 疫症 | 豬流感 | 中國 | 亞太 | . 5 新冠肺炎 | 屬地 | 抗生素 | 疫苗量 | 殺病毒 | 流行株 | 疫症 | 特殊 | 自我隔離 | 入境 | 病疫情 | 抗流感 | 台灣人 | 諸多 | . 6 疫調 | 疫情處 | 輪狀病毒 | 卡介苗 | 麻疹病毒 | 株型別 | 非典型肺炎 | 侵襲性 | 隔離者 | 調查表 | 麻疹 | 流感疫 | 中國台灣 | 世紀 | . 7 疫市 | 升溫 | 接種 | 價 | 防病毒 | 腸 | 疫情 | 冠狀動脈 | 病毒檢測 | 港口 | 流行性腮腺炎 | 季節性 | 台灣獨立 | 跨國性 | . 8 新型冠狀病毒 | 警訊 | 預防接種 | 多合一 | 冠状病毒 | 重組 | 廢炎 | 症候群 | 健康申報 | 登機 | 流感疫苗 | 流感病 | 台灣社 | 面臨 | . 9 疫病 | 嚴峻 | 麻疹 | 廠牌 | 病原體 | 毒株 | 疫病 | 冠狀病毒 | 檢測 | 聲明卡 | 登革熱 | 新型 | 中華民國 | 之中 | . . keywords = &quot;頭痛 發燒 流鼻水 &quot; key_list = keywords.split() concat_dfs(key_list) . HKNews_頭痛 TWNews_頭痛 HKNews_發燒 TWNews_發燒 HKNews_流鼻水 TWNews_流鼻水 . 0 偏頭痛 | 肌肉痛 | 咳嗽 | 出現 | 鼻水 | 鼻水 | . 1 頭疼 | 骨頭痛 | 病徵 | 症狀 | 流鼻涕 | 流 | . 2 胃痛 | 噁心 | 發高燒 | 喉嚨痛 | 咳嗽 | 鼻塞 | . 3 痠痛 | 骨頭 | 發病 | 嗅覺 | 喉嚨痛 | 喉嚨 | . 4 酸痛 | 肌肉 | 喉嚨痛 | 味覺 | 出疹 | 喉嚨癢 | . 5 絞痛 | 後眼 | 流鼻水 | 鼻水 | 發燒 | 喉嚨痛 | . 6 腫痛 | 畏寒 | 症狀 | 咳嗽 | 皮疹 | 嗅覺 | . 7 頭暈 | 倦怠 | 徵狀 | 喉嚨 | 流鼻血 | 味覺 | . 8 心絞痛 | 窩痛 | 出疹 | 疲倦 | 肚瀉 | 紅疹 | . 9 腰背痛 | 結膜 | 呼吸困難 | 流 | 咳血 | 倦怠 | . Recap . You can easily find out words most similar to a keyword that you&#39;re interested in just by loading a fastText model. And for it to work pretty well, you don&#39;t even need to have a huge corpus at hand. Even if you don&#39;t know how to train a model from scratch, you can still make good use of fastText by loading pretrained models, like those released by Facebook. In total, 157 languages are covered, including even Malay and Malayalam (Btw, check out this Malayalam grammar that I wrote and is now archived on Semantic Scholar)! . Note: This is my first post written in Jupyter notebook. After I uploaded the .ipynb file to GitHub, the post didn&#8217;t show up automatically and I got a CI failing warning in my repo. Listed in the tip section below is what I did to fix the problem, though I&#8217;m not sure which of them was the key. . Tip: 1. requested an automatic update by following the instructions in the troubleshooting guide 2. deleted the backtick symbol in the summary section of the front matter 3. uploaded the .ipynb file straight from Colab to GitHub instead of doing this manually .",
            "url": "https://howard-haowen.github.io/blog.ai/fasttext/embeddings/similar-words/chinese/2021/01/22/fastText-embeddings-for-traditional-Chinese.html",
            "relUrl": "/fasttext/embeddings/similar-words/chinese/2021/01/22/fastText-embeddings-for-traditional-Chinese.html",
            "date": " • Jan 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Post",
            "content": "My First Post: Setting tone for this blog . . There’s always an awesome list for X. . Don&#39;t reinvent the wheel is something you’ll hear a lot in the field of technology. That means, whenever possible, try to use existing tools out there instead of building from scratch. If you use GitHub long enough, you probably already know this: for almost everything you’d like to learn, there’s an awesome list for that, which collects all sorts of awesome resources, including tools and tutorials. All you need to do is search for awesome X on GitHub. Or better yet, there’s even a meta list of awesome lists on various topics, like sindresorhus/awesome. Included in it is an awesome list for linguistics, theimpossibleastronaut/awesome-linguistics, which is a good place to start learning about natural language processing (NLP) if you are a humanities major who knows nothing about programming, as I was about one year ago. To take one more example, I wish I had discovered keon/awesome-nlp much earlier, which could’ve saved me lots of time when I was still fumbling around and trying to wrap my head around how a tool, say gensim, fits into the broader picture of NLP. But sometimes the name of an awesome list doesn’t have the keyword awesome in it, such as this gem ivan-bilan/The-NLP-Pandect. In my opinion, although an awesome list by any other name would be as awesome, the The-NLP-Pandect repo would have got much more stars if awesome were in its name. . But the hardest part is to get the ball rolling. . However, awesome as they are, awesome lists can be quite intimidating to go through and easy to get lost in. And even when you are lucky enough to finally come across an awesome tool that you wanna try out, it sometimes takes lots of trials and errors to figure out the right way to get the ball rolling, especially when you are a fresh programmer. So on this blog, I plan to add my personal touch to various tools, documenting not only what I did right to get the ball rolling, but also what I did wrong to save you (or even future me) from abysmal frustration. For almost every tool, there is already a wide specturum of instructional documents available online, ranging from hardcore official documentations to professional posts on platforms like Medium. And this blog is meant to be a friendly complement to those. I’ll be writing in plain language because I was not trained for computer science or programming anyway. . The fast stack . I’d like to start with a series of tools that I dub the fast stack, including fastpages, fast.ai, fastText, and fastAPI. Designed by the fast.ai team (not true, thanks go to Hamel Husain, who corrected me), fastpages is basically a template for creating a blog (like this one!) and does lots of awesome things for you hehind the scenes. Features that I like about it include: . automatically converts .md and .ipynb files on GitHub to posts on your website | automatically adds links to Colab and GitHub | shows interactive visualizations of the output of codes | supports comments | is free from end to end | . Truth be told that I actually failed twice before I successfully set up this blog. The lesson learned is this: do exactly what’s said in the instructions! Humanities majors like me are often taught to be creative, but be sure to leave your creativity at the door when you set up computer programs. This then concludes my first repo. Nothing is super technical here since it’s just a warm-up. I’ll save other tools in the fast stack for another day. . . I was clueless when I read PR in the instructions. It turns out to mean &#39;pull requests&#39;. Click on the tab that says &#39;pull requests&#39; when you are done forking the original repo. Then you&#39;re good to go by following the instructions there.",
            "url": "https://howard-haowen.github.io/blog.ai/awesome-list/fastpages/2020/01/17/my-first-post-dont-reinvent-the-wheel.html",
            "relUrl": "/awesome-list/fastpages/2020/01/17/my-first-post-dont-reinvent-the-wheel.html",
            "date": " • Jan 17, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Haowen Jiang. I got a PhD of linguistics from Rice University and spent most of my early career in academia doing theoretical research on indigenous languages of Taiwan, all of them related to languages such as Tagalog and Malay/Indonesian. Then along came COVID-19, which disrupted most people’s lives, including mine. Somehow I became hooked on machine learning and Python programming, and now I work as an AI engineer, focusing on Natural Language Processing (NLP) and other AI-related applicational stuff. . . . This website is powered by fastpages (https://github.com/fastai/fastpages).",
          "url": "https://howard-haowen.github.io/blog.ai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://howard-haowen.github.io/blog.ai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}